import re
import os

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, InputFile
from aiogram.types.input_file import FSInputFile

from database.crud import get_products, add_lead, get_photos_by_product
from database.models import ProductCategory
from database.db import async_session
from states.user import OrderForm
from keyboards.user import (
    main_menu_kb, get_bedroom_kb, get_kitchen_kb, get_soft_kb, get_soft_rus_kb,
    get_simple_cat_kb, get_product_card_kb
)



router = Router()

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@router.message(F.text == '/start')
async def start_menu(msg: Message):
    text = (
        "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MebelBot! ‚ú®\n\n"
        "üè† –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –º–µ–±–µ–ª—å –¥–ª—è –¥–æ–º–∞ –∏ –æ—Ñ–∏—Å–∞:\n"
        "   ‚Ä¢ –°–ø–∞–ª—å–Ω–∏ üõèÔ∏è\n"
        "   ‚Ä¢ –ö—É—Ö–Ω–∏ üçΩÔ∏è\n"
        "   ‚Ä¢ –ú—è–≥–∫–∞—è –º–µ–±–µ–ª—å üõãÔ∏è\n"
        "   ‚Ä¢ –®–∫–∞—Ñ—ã, —Å—Ç–æ–ª—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!\n\n"
        "üí¨ –í—ã –º–æ–∂–µ—Ç–µ:\n"
        "   ‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤\n"
        "   ‚Ä¢ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É\n"
        "   ‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
        "   ‚Ä¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É\n\n"
        "üì≤ –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ!\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏."
    )
    await msg.answer(text, reply_markup=main_menu_kb)

@router.callback_query(F.data == 'back_main')
async def back_main(call: CallbackQuery, state: FSMContext = None):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è-–∫–∞—Ä—Ç–æ—á–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    error = False
    if state is not None:
        data = await state.get_data()
        msg_ids = data.get('product_message_ids', [])
        for msg_id in msg_ids:
            try:
                await call.bot.delete_message(call.message.chat.id, msg_id)
            except Exception:
                pass
        await state.update_data(product_message_ids=[])
    try:
        await call.message.edit_text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=main_menu_kb)
    except Exception:
        error = True
    if error:
        await call.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=main_menu_kb)

@router.callback_query(F.data == 'back_to_cat')
async def back_to_cat(call: CallbackQuery, state: FSMContext = None):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è-–∫–∞—Ä—Ç–æ—á–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    error = False
    if state is not None:
        data = await state.get_data()
        msg_ids = data.get('product_message_ids', [])
        for msg_id in msg_ids:
            try:
                await call.bot.delete_message(call.message.chat.id, msg_id)
            except Exception:
                pass
        await state.update_data(product_message_ids=[])
    try:
        await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=main_menu_kb)
    except Exception:
        error = True
    if error:
        await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=main_menu_kb)

# --- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
@router.callback_query(F.data == 'cat_bedroom')
async def bedroom_menu(call: CallbackQuery):
    await call.message.edit_text('–°–ø–∞–ª—å–Ω–∞—è –º–µ–±–µ–ª—å:', reply_markup=get_bedroom_kb())

@router.callback_query(F.data == 'cat_kitchen')
async def kitchen_menu(call: CallbackQuery):
    await call.message.edit_text('–ö—É—Ö–æ–Ω–Ω–∞—è –º–µ–±–µ–ª—å:', reply_markup=get_kitchen_kb())

@router.callback_query(F.data == 'cat_soft')
async def soft_menu(call: CallbackQuery):
    await call.message.edit_text('–ú—è–≥–∫–∞—è –º–µ–±–µ–ª—å:', reply_markup=get_soft_kb())

@router.callback_query(F.data == 'soft')
async def soft_menu_back(call: CallbackQuery):
    await call.message.edit_text('–ú—è–≥–∫–∞—è –º–µ–±–µ–ª—å:', reply_markup=get_soft_kb())

@router.callback_query(F.data == 'soft_rus')
async def soft_rus_menu(call: CallbackQuery):
    await call.message.edit_text('–ú—è–≥–∫–∞—è –º–µ–±–µ–ª—å ‚Äî –†–æ—Å—Å–∏–π—Å–∫–∞—è:', reply_markup=get_soft_rus_kb())

@router.callback_query(F.data == 'back_to_cat')
async def back_to_cat(call: CallbackQuery, state: FSMContext = None):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è-–∫–∞—Ä—Ç–æ—á–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    error = False
    if state is not None:
        data = await state.get_data()
        msg_ids = data.get('product_message_ids', [])
        for msg_id in msg_ids:
            try:
                await call.bot.delete_message(call.message.chat.id, msg_id)
            except Exception:
                pass
        await state.update_data(product_message_ids=[])
    try:
        await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=main_menu_kb)
    except Exception:
        error = True
    if error:
        await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=main_menu_kb)

# --- –ì–∞–ª–µ—Ä–µ—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ---
def get_country_display(country_code):
    if country_code == 'russia':
        return 'üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∞—è'
    elif country_code == 'turkey':
        return 'üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è'
    return country_code or '-'

def get_type_display(type_code):
    if type_code == 'straight':
        return '–ü—Ä—è–º–∞—è'
    elif type_code == 'corner':
        return '–£–≥–ª–æ–≤–∞—è'
    return type_code or '-'

async def show_products(call, category, country=None, type_=None, state: FSMContext = None):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if state is not None:
        data = await state.get_data()
        prev_product_msgs = data.get('product_message_ids', [])
        for msg_id in prev_product_msgs:
            try:
                await call.bot.delete_message(call.message.chat.id, msg_id)
            except Exception:
                pass
        await state.update_data(product_message_ids=[])
    else:
        # fallback: —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º FSM
        try:
            await call.message.delete()
        except Exception:
            pass
    async with async_session() as session:
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –µ—Å–ª–∏ type_ == "skip_type" –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É
        type_for_query = None if type_ in ("skip_type", "", None) else type_
        products = await get_products(session, category=category, country=country, type_=type_for_query)
        if not products:
            if call.message:
                try:
                    await call.message.edit_text('–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç', reply_markup=get_simple_cat_kb('back_main'))
                except Exception:
                    await call.message.answer('–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç', reply_markup=get_simple_cat_kb('back_main'))
            else:
                await call.message.answer('–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç', reply_markup=get_simple_cat_kb('back_main'))
            return
        new_product_msgs = []
        for idx, product in enumerate(products):
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Photo
            photos = await get_photos_by_product(session, product.id)
            media = []
            for i, photo in enumerate(photos):
                file_path = os.path.join('media', photo.filename)
                if os.path.exists(file_path):
                    media.append(InputMediaPhoto(media=FSInputFile(file_path), caption=None))
            price = product.price
            if price is None or price == 0:
                price_str = '-'
            else:
                price_str = f"{int(price) if float(price).is_integer() else price} ‚ÇΩ"
            card_text = (
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.description or '-'}\n"
                f"–°—Ç—Ä–∞–Ω–∞: {get_country_display(product.country)}\n"
                f"–¢–∏–ø: {get_type_display(getattr(product, 'type', None))}\n"
                f"–†–∞–∑–º–µ—Ä—ã: {getattr(product, 'sizes', '-') or '-'}\n"
                f"–¶–µ–Ω–∞: {price_str}"
            )
            # 1. –°–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ç–æ
            if media:
                if len(media) == 1:
                    msg = await call.message.answer_photo(media=media[0].media)
                    new_product_msgs.append(msg.message_id)
                else:
                    msgs = await call.message.answer_media_group(media)
                    for m in msgs:
                        new_product_msgs.append(m.message_id)
            # 2. –ó–∞—Ç–µ–º –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            msg_card = await call.message.answer(card_text, parse_mode='HTML')
            new_product_msgs.append(msg_card.message_id)
            # 3. –ó–∞—Ç–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            msg_btns = await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_product_card_kb(product.id))
            new_product_msgs.append(msg_btns.message_id)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ FSM –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    if state is not None:
        await state.update_data(product_message_ids=new_product_msgs)

# --- –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ ---
@router.callback_query(F.data.startswith('bedroom'))
async def show_bedroom(call: CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except Exception:
        pass
    sub = call.data.replace('bedroom_', '')
    country = None
    if sub in ['rus', 'tur']:
        country = 'russia' if sub == 'rus' else 'turkey'
    await show_products(call, ProductCategory.bedroom, country=country, state=state)

@router.callback_query(F.data.startswith('kitchen'))
async def show_kitchen(call: CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except Exception:
        pass
    sub = call.data.replace('kitchen_', '')
    type_ = None
    if sub in ['straight', 'corner']:
        type_ = sub  # 'straight' –∏–ª–∏ 'corner'
    await show_products(call, ProductCategory.kitchen, type_=type_, state=state)

@router.callback_query(F.data == 'soft_rus_straight')
async def show_soft_rus_straight(call: CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except Exception:
        pass
    await show_products(call, ProductCategory.soft, country='russia', type_='straight', state=state)

@router.callback_query(F.data == 'soft_rus_corner')
async def show_soft_rus_corner(call: CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except Exception:
        pass
    await show_products(call, ProductCategory.soft, country='russia', type_='corner', state=state)

@router.callback_query(F.data == 'soft_tur')
async def show_soft_tur(call: CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except Exception:
        pass
    await show_products(call, ProductCategory.soft, country='turkey', state=state)

@router.callback_query(F.data == 'cat_tables')
async def show_tables(call: CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except Exception:
        pass
    await show_products(call, ProductCategory.tables, state=state)

@router.callback_query(F.data == 'cat_dressers')
async def show_dressers(call: CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except Exception:
        pass
    await show_products(call, ProductCategory.dressers, state=state)

@router.callback_query(F.data == 'cat_mattress')
async def show_mattress(call: CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except Exception:
        pass
    await show_products(call, ProductCategory.mattress, state=state)

@router.callback_query(F.data == 'cat_wardrobe')
async def show_wardrobe(call: CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except Exception:
        pass
    await show_products(call, ProductCategory.wardrobe, state=state)

@router.callback_query(F.data == 'cat_beds')
async def show_beds(call: CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except Exception:
        pass
    await show_products(call, ProductCategory.beds, state=state)

# --- –û –∫–æ–º–ø–∞–Ω–∏–∏ ---
@router.callback_query(F.data == 'about')
async def about_company(call: CallbackQuery):
    await call.message.edit_text('–ú–µ–±–µ–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω. –ö–æ–Ω—Ç–∞–∫—Ç—ã: +7-900-000-00-00\n–ê–¥—Ä–µ—Å: –≥. –ü—Ä–∏–º–µ—Ä, —É–ª. –ú–µ–±–µ–ª—å–Ω–∞—è, 1', reply_markup=get_simple_cat_kb('back_main'))

# --- –ó–∞–∫–∞–∑, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, –≤–æ–ø—Ä–æ—Å ---
@router.callback_query(F.data.startswith('order_'))
async def order_start(call: CallbackQuery, state: FSMContext):
    product_id = int(call.data.split('_')[1])
    await state.update_data(product_id=product_id)
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
    await state.set_state(OrderForm.waiting_for_name)

@router.message(OrderForm.waiting_for_name)
async def order_name(msg: Message, state: FSMContext):
    await state.update_data(name=msg.text)
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567):')
    await state.set_state(OrderForm.waiting_for_phone)

@router.message(OrderForm.waiting_for_phone)
async def order_phone(msg: Message, state: FSMContext):
    phone = msg.text.strip()
    if not re.match(r'^\+?7\d{10}$', phone):
        await msg.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567:')
        return
    await state.update_data(phone=phone)
    await msg.answer('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "-")')
    await state.set_state(OrderForm.waiting_for_comment)

@router.message(OrderForm.waiting_for_comment)
async def order_comment(msg: Message, state: FSMContext):
    data = await state.get_data()
    comment = msg.text if msg.text != '-' else ''
    async with async_session() as session:
        await add_lead(session, name=data['name'], phone=data['phone'], product_id=data['product_id'], comment=comment)
    await msg.answer('–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.')
    await state.clear()

# --- –ö–Ω–æ–ø–∫–∏ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" –∏ "–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é" ---
@router.callback_query(F.data.startswith('ask_'))
async def ask_question(call: CallbackQuery):
    await call.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.')

@router.callback_query(F.data.startswith('consult_'))
async def consult_request(call: CallbackQuery):
    await call.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.')
